package {{$packageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

/**
 * Movable downward object handle for objects of domain {@link {{$sourceClassName}}}.<p/>
 *
 * This class was generated automatically. Don't try to change it.
 */
@ObjectHandle({{$sourceClassSimpleName}}.class)
{{$generatedAnnotation}}
public class {{$classSimpleName}}{{$classTypeParams}} implements {{$movableObjectHandleName}}{{$domainTypeArguments}} {
  private final {{$childObjectHandleType}}{{$classTypeParamsBrief}} {{$childField}};

  public {{$classSimpleName}}({{$childObjectHandleType}}{{$classTypeParamsBrief}} {{$childField}}) {
    this.{{$childField}} = {{$childField}};
  }

{{when $isAlias}}
  @Override
  public Type<{{$primaryDomainSimpleName}}{{$domainTypeArguments}}> domain() {
    return {{$domainType}}
  }

  @Override
  public Class<?> domainClass() {
    return {{$domainClassSimpleName}}.class;
  }
{{else}}
{{when $domainTypeParamsBrief.isEmpty()}}
  @Override
  public Type<{{$parentDomainClassSimpleName}}> domain() {
    return Types.of({{$parentDomainClassSimpleName}}.class);
  }

  @Override
  public Class<?> domainClass() {
    return {{$domainClassSimpleName}}.class;
  }
{{else}}
  @Override
  public Type<{{$parentDomainClassSimpleName}}{{$domainTypeParamsBrief}}> domain() {
    return {{$domainType}}
  }
{{end}}
{{end}}
{{end}}

  {{for method : $methods}}
  {{$method.get("javadoc")}}
  @Override
  {{$method.get("declaration")}};

{{end}}

  @Override
  public <T, Q> T mapThru(Class<? extends Transition1> transitionClass, Q qualifier) throws TraverseException {
    return (T) {{$childField}}.mapThru(transitionClass, qualifier);
  }

  @Override
  public <Q> {{$movableObjectHandleName}}{{$domainTypeArguments}} moveThru(String tid, Q qualifier) throws TraverseException {
    {{$childField}}.moveThru(tid, qualifier);
    return this;
  }

{{when $isAlias}}
  @Override
  public {{$movableObjectHandleName}}{{$domainTypeArguments}} moveThru(TransitionMethod0<? super {{$primaryDomainSimpleName}}{{$domainTypeArguments}}, ? super {{$primaryDomainSimpleName}}{{$domainTypeArguments}}> transitionMethod) throws TraverseException {
    {{$childField}}.moveThru(transitionMethod);
    return this;
  }

  @Override
  public <Q> {{$movableObjectHandleName}}{{$domainTypeArguments}} moveThru(TransitionMethod1<? super {{$primaryDomainSimpleName}}{{$domainTypeArguments}}, ? super {{$primaryDomainSimpleName}}{{$domainTypeArguments}}, Q> transitionMethod, Q qualifier) throws TraverseException {
    {{$childField}}.moveThru(transitionMethod, qualifier);
    return this;
  }
{{else}}
  @Override
  public {{$movableObjectHandleName}}{{$domainTypeArguments}} moveThru(TransitionMethod0<? super {{$domainClassSimpleName}}{{$domainTypeArguments}}, ? super {{$domainClassSimpleName}}{{$domainTypeArguments}}> transitionMethod) throws TraverseException {
    {{$childField}}.moveThru(transitionMethod);
    return this;
  }

  @Override
  public <Q> {{$movableObjectHandleName}}{{$domainTypeArguments}} moveThru(TransitionMethod1<? super {{$domainClassSimpleName}}{{$domainTypeArguments}}, ? super {{$domainClassSimpleName}}{{$domainTypeArguments}}, Q> transitionMethod, Q qualifier) throws TraverseException {
    {{$childField}}.moveThru(transitionMethod, qualifier);
    return this;
  }
{{end}}

  @Override
  public {{$movableObjectHandleName}}{{$domainTypeArguments}} moveThru(Class<? extends Transition0> transitionClass) throws TraverseException {
    {{$childField}}.moveThru(transitionClass);
    return this;
  }

  @Override
  public <Q> {{$movableObjectHandleName}}{{$domainTypeArguments}} moveThru(Class<? extends Transition1> transitionClass, Q qualifier) throws TraverseException {
    {{$childField}}.moveThru(transitionClass, qualifier);
    return this;
  }

  @Override
  public <R, Q> R mapOfMovingThru(String tid, Q qualifier) throws TraverseException {
    return (R) {{$childField}}.mapOfMovingThru(tid, qualifier);
  }

{{when $isAlias}}
  @Override
  public <R> R mapOfMovingThru(TransitionMethod0<? super {{$primaryDomainSimpleName}}{{$domainTypeArguments}}, R> transitionMethod) throws TraverseException {
    return (R) {{$childField}}.mapOfMovingThru(transitionMethod);
  }

  @Override
  public <R, Q> R mapOfMovingThru(TransitionMethod1<? super {{$primaryDomainSimpleName}}{{$domainTypeArguments}}, R, Q> transitionMethod, Q qualifier) throws TraverseException {
    return (R) {{$childField}}.mapOfMovingThru(transitionMethod, qualifier);
  }
{{else}}
  @Override
  public <R> R mapOfMovingThru(TransitionMethod0<? super {{$domainClassSimpleName}}{{$domainTypeArguments}}, R> transitionMethod) throws TraverseException {
    return (R) {{$childField}}.mapOfMovingThru(transitionMethod);
  }

  @Override
  public <R, Q> R mapOfMovingThru(TransitionMethod1<? super {{$domainClassSimpleName}}{{$domainTypeArguments}}, R, Q> transitionMethod, Q qualifier) throws TraverseException {
    return (R) {{$childField}}.mapOfMovingThru(transitionMethod, qualifier);
  }
{{end}}

  @Override
  public <R> R mapOfMovingThru(Class<? extends Transition0> transitionClass) throws TraverseException {
    return (R) {{$childField}}.mapOfMovingThru(transitionClass);
  }

  @Override
  public <R, Q> R mapOfMovingThru(Class<? extends Transition1> transitionClass, Q qualifier) throws TraverseException {
    return (R) {{$childField}}.mapOfMovingThru(transitionClass, qualifier);
  }
}
