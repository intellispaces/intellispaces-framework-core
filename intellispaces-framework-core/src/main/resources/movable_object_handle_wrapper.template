package {{$packageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

/**
 * This class was generated automatically. Don't try to change it.
 */
@Wrapper({{$sourceClassSimpleName}}.class)
{{$generatedAnnotation}}
public class {{$classSimpleName}}{{$typeParamsFull}} extends {{$sourceClassSimpleName}}{{$typeParamsBrief}} implements ObjectHandleWrapper<{{$domainClassSimpleName}}{{$typeParamsBrief}}> {
  private KernelObjectHandle $handle;

{{for constructor : $constructors}}
  public {{$classSimpleName}}({{for param : $constructor.get("params")}}{{$param.get("type")}} {{$param.get("name")}}{{when $param.isNotLast()}}, {{end}}{{end}}) {
    super({{for param : $constructor.get("params")}}{{$param.get("name")}}{{when $param.isNotLast()}},{{end}}{{end}});
    KernelFunctions.currentModule().objectRegistry().add(this);
  }
{{end}}

  @Override
  public void $init(KernelObjectHandle handle) {
    this.$handle = handle;
{{when $injections.isNotEmpty()}}
    this.$handle.setInjections(
{{for injection : $injections}}
{{when $injection.get("kind").eq("guide")}}
      GuideInjections.get({{$sourceClassSimpleName}}.class, "{{$injection.get("name")}}", {{$injection.get("type")}}.class){{when $injection.isNotLast()}},{{end}}
{{else}}
      AutoGuideInjections.get({{$sourceClassSimpleName}}.class, "{{$injection.get("name")}}", {{$injection.get("type")}}.class){{when $injection.isNotLast()}},{{end}}
{{end}}
{{end}}
    );
{{end}}
{{when $transitionActions.isNotEmpty()}}
    this.$handle.setTransitionActions(
{{for transitionAction : $transitionActions}}
      {{$transitionAction}}{{when $transitionAction.isNotLast()}},{{end}}
{{end}}
    );
{{end}}
{{when $guideActions.isNotEmpty()}}
    this.$handle.setGuideActions(
{{for guideAction : $guideActions}}
      {{$guideAction}}{{when $guideAction.isNotLast()}},{{end}}
{{end}}
    );
{{end}}
  }

  @Override
  public KernelObjectHandle $handle() {
    return this.$handle;
  }

{{for method : $domainMethods}}
  @Override
  {{$method.get("declaration")}};

{{end}}

  @Override
  public <Q> {{$sourceClassSimpleName}} moveThru(String tid, Q qualifier) throws TraverseException {
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover1<{{$sourceClassSimpleName}}, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    return ({{$sourceClassSimpleName}}) mover.move(this, qualifier);
  }

  @Override
  public {{$sourceClassSimpleName}} moveThru(TransitionMethod0<? super {{$domainClassSimpleName}}, ? super {{$domainClassSimpleName}}> transitionMethod) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId({{$domainClassSimpleName}}.class, transitionMethod);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover0<{{$sourceClassSimpleName}}> mover = Modules.current().autoMoverThruTransition0(sourceType, tid);
    return ({{$sourceClassSimpleName}}) mover.move(this);
  }

  @Override
  public <Q> {{$sourceClassSimpleName}} moveThru(TransitionMethod1<? super {{$domainClassSimpleName}}, ? super {{$domainClassSimpleName}}, Q> transitionMethod, Q qualifier) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId({{$domainClassSimpleName}}.class, transitionMethod, null);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover1<{{$sourceClassSimpleName}}, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    return ({{$sourceClassSimpleName}}) mover.move(this, qualifier);
  }

  @Override
  public {{$sourceClassSimpleName}} moveThru(Class<? extends Transition0> transitionClass) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId(transitionClass);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover0<{{$sourceClassSimpleName}}> mover = Modules.current().autoMoverThruTransition0(sourceType, tid);
    return ({{$sourceClassSimpleName}}) mover.move(this);
  }

  @Override
  public <Q> {{$sourceClassSimpleName}} moveThru(Class<? extends Transition1> transitionClass, Q qualifier) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId(transitionClass);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover1<{{$sourceClassSimpleName}}, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    return ({{$sourceClassSimpleName}}) mover.move(this, qualifier);
  }

  @Override
  public <R, Q> R mapOfMovingThru(String tid, Q qualifier) throws TraverseException {
    //Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    //Mover1<{{$sourceClassSimpleName}}, R, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    //return (R) mover.move(this, qualifier);
    throw new RuntimeException("Not implemented");
  }

  @Override
  public <R> R mapOfMovingThru(TransitionMethod0<? super {{$domainClassSimpleName}}, R> transitionMethod) throws TraverseException {
    //String tid = TransitionFunctions.getTransitionId({{$domainClassSimpleName}}.class, transitionMethod);
    //Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    //Mover0<{{$sourceClassSimpleName}}, R> mover = Modules.current().autoMoverThruTransition0(sourceType, tid);
    //return (R) mover.move(this);
    throw new RuntimeException("Not implemented");
  }

  @Override
  public <R, Q> R mapOfMovingThru(TransitionMethod1<? super {{$domainClassSimpleName}}, R, Q> transitionMethod, Q qualifier) throws TraverseException {
    //String tid = TransitionFunctions.getTransitionId({{$domainClassSimpleName}}.class, transitionMethod, null);
    //Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    //Mover1<{{$sourceClassSimpleName}}, R, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    //return (R) mover.move(this, qualifier);
    throw new RuntimeException("Not implemented");
  }

  @Override
  public <R> R mapOfMovingThru(Class<? extends Transition0> transitionClass) throws TraverseException {
    //String tid = TransitionFunctions.getTransitionId(transitionClass);
    //Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    //Mover0<{{$sourceClassSimpleName}}, R> mover = Modules.current().autoMoverThruTransition0(sourceType, tid);
    //return (R) mover.move(this);
    throw new RuntimeException("Not implemented");
  }

  @Override
  public <R, Q> R mapOfMovingThru(Class<? extends Transition1> transitionClass, Q qualifier) throws TraverseException {
    //String tid = TransitionFunctions.getTransitionId(transitionClass);
    //Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    //Mover1<{{$sourceClassSimpleName}}, R, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    //return (R) mover.move(this, qualifier);
    throw new RuntimeException("Not implemented");
  }

{{for method : $injectionMethods}}
  {{$method.get("javadoc")}}
{{for annotation : $method.get("annotations")}}
  @{{$annotation}}
{{end}}
  public {{$method.get("signature")}} {
    {{$method.get("body")}}
  }
{{end}}
}
