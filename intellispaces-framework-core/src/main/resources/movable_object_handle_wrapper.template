package {{$packageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

/**
 * This class was generated automatically. Don't try to change it.
 */
@Wrapper({{$sourceClassSimpleName}}.class)
{{$generatedAnnotation}}
public class {{$classSimpleName}}{{$typeParamsFull}} extends {{$sourceClassSimpleName}}{{$typeParamsBrief}} implements ObjectHandleWrapper<{{$domainClassSimpleName}}{{$typeParamsBrief}}> {
  private SystemObjectHandle $handle;

{{for constructor : $constructors}}
  public {{$classSimpleName}}({{for param : $constructor.get("params")}}{{$param.get("type")}} {{$param.get("name")}}{{when $param.isNotLast()}}, {{end}}{{end}}) {
    super({{for param : $constructor.get("params")}}{{$param.get("name")}}{{when $param.isNotLast()}},{{end}}{{end}});
    SystemFunctions.currentModule().objectRegistry().add(this);
  }
{{end}}

  @Override
  public void $init(SystemObjectHandle handle) {
    this.$handle = handle;
{{when $transitionActions.isNotEmpty()}}
    this.$handle.setTransitionActions(
{{for transitionAction : $transitionActions}}
      {{$transitionAction}}{{when $transitionAction.isNotLast()}},{{end}}
{{end}}
    );
{{end}}
{{when $guideActions.isNotEmpty()}}
    this.$handle.setGuideActions(
{{for guideAction : $guideActions}}
      {{$guideAction}}{{when $guideAction.isNotLast()}},{{end}}
{{end}}
    );
{{end}}
  }

  @Override
  public SystemObjectHandle $handle() {
    return this.$handle;
  }

{{for method : $domainMethods}}
  @Override
  {{$method.get("declaration")}};

{{end}}

  @Override
  public <R, Q> R moveThru(String tid, Q qualifier) throws TraverseException {
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover1<{{$sourceClassSimpleName}}, R, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    return (R) mover.move(this, qualifier);
  }

  @Override
  public <R> R moveThru(TransitionMethod0<? super {{$domainClassSimpleName}}, R> transitionMethod) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId({{$domainClassSimpleName}}.class, transitionMethod);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover0<{{$sourceClassSimpleName}}, R> mover = Modules.current().autoMoverThruTransition0(sourceType, tid);
    return (R) mover.move(this);
  }

  @Override
  public <R, Q> R moveThru(TransitionMethod1<? super {{$domainClassSimpleName}}, R, Q> transitionMethod, Q qualifier) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId({{$domainClassSimpleName}}.class, transitionMethod, null);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover1<{{$sourceClassSimpleName}}, R, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    return (R) mover.move(this, qualifier);
  }

  @Override
  public <R> R moveThru(Class<? extends Transition0> transitionClass) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId(transitionClass);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover0<{{$sourceClassSimpleName}}, R> mover = Modules.current().autoMoverThruTransition0(sourceType, tid);
    return (R) mover.move(this);
  }

  @Override
  public <R, Q> R moveThru(Class<? extends Transition1> transitionClass, Q qualifier) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId(transitionClass);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover1<{{$sourceClassSimpleName}}, R, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    return (R) mover.move(this, qualifier);
  }
}
