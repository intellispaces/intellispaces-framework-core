package {{$packageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

/**
 * Wrapper of module unit {@link {{$sourceClassName}}}.<p/>
 *
 * This class was generated automatically. Don't try to change it.
 */
{{$generatedAnnotation}}
@Wrapper({{$sourceClassSimpleName}}.class)
public class {{$classSimpleName}} extends {{$sourceClassSimpleName}} implements UnitWrapper {
  private ShadowUnit $shadowUnit;

  @Override
  public void $init(ShadowUnit shadowUnit) {
    this.$shadowUnit = shadowUnit;
{{when $injections.isNotEmpty()}}
    this.$shadowUnit.setProjectionInjections(
{{for injection : $injections}}
      UnitProjectionInjections.get({{$sourceClassSimpleName}}.class, "{{$injection.get("name")}}", {{$injection.get("type")}}.class){{when $injection.isNotLast()}},{{end}}
{{end}}
    );
{{end}}
{{when $projectionDefinitions.isNotEmpty()}}
    this.$shadowUnit.setProjectionDefinitions(
{{for projectionDefinition : $projectionDefinitions}}
      {{$projectionDefinition}}{{when $projectionDefinition.isNotLast()}},{{end}}
{{end}}
    );
{{end}}
{{when $guideActions.isNotEmpty()}}
    this.$shadowUnit.setGuideActions(
{{for guideAction : $guideActions}}
      {{$guideAction}}{{when $guideAction.isNotLast()}},{{end}}
{{end}}
    );
{{end}}
  }

  @Override
  public ShadowUnit $shadowUnit() {
    return this.$shadowUnit;
  }

{{for method : $projectionMethods}}
  {{$method.get("javadoc")}}
{{for annotation : $method.get("annotations")}}
  @{{$annotation}}
{{end}}
  public {{$method.get("signature")}} {
    {{$method.get("body")}}
  }
{{end}}
{{for method : $guideMethods}}
  @Override
  @Ordinal({{$method.index()}})
  {{$method.get("declaration")}}

{{end}}
}
