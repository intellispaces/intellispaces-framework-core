package {{$packageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

/**
 * Common handle of the object of domain {@link {{$sourceClassName}}}.<p/>
 *
 * This class was generated automatically. Don't try to change it.
 */
@ObjectHandle({{$sourceClassSimpleName}}.class)
{{$generatedAnnotation}}
{{when $isAlias}}
public interface {{$classSimpleName}}{{$domainTypeParamsFull}} extends {{$primaryObjectHandle}}, {{$objectHandleBunch}}{{$domainTypeParamsBrief}} {

  @Override
  default Type<{{$mainPrimaryDomainSimpleName}}{{$primaryDomainTypeArguments}}> domain() {
    return Types.of({{$mainPrimaryDomainSimpleName}}.class);
  }

  @Override
  default Class<{{$mainPrimaryDomainSimpleName}}{{$primaryDomainTypeArguments}}> domainClass() {
    return (Class) {{$mainPrimaryDomainSimpleName}}.class;
  }
{{else}}
public interface {{$classSimpleName}}{{$domainTypeParamsFull}} extends object.intellispaces.core.ObjectHandle<{{$sourceClassSimpleName}}{{$domainTypeParamsBrief}}>, {{$objectHandleBunch}}{{$domainTypeParamsBrief}} {

{{when $domainTypeParamsBrief.isEmpty()}}
  @Override
  default Type<{{$sourceClassSimpleName}}> domain() {
    return Types.of({{$sourceClassSimpleName}}.class);
  }
{{else}}
  @Override
  Type<{{$sourceClassSimpleName}}{{$domainTypeParamsBrief}}> domain();
{{end}}

  @Override
  default Class<{{$sourceClassSimpleName}}{{$domainTypeParamsBrief}}> domainClass() {
    return (Class) {{$sourceClassSimpleName}}.class;
  }
{{end}}

{{for method : $domainMethods}}
  {{$method.get("javadoc")}}
  {{$method.get("declaration")}};

{{end}}
  @Override
  {{$movableClassSimpleName}}{{$domainTypeParamsBrief}} asMovableOrElseThrow();
}
