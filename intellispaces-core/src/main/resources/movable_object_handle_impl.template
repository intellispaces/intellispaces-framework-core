package {{$packageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

/**
 * This class was generated automatically. Don't try to change it.
 */
{{$generatedAnnotation}}
public class {{$classSimpleName}}{{$typeParamsFull}} extends {{$sourceClassSimpleName}}{{$typeParamsBrief}} implements ObjectHandleWrapper<{{$domainClassSimpleName}}{{$typeParamsBrief}}> {
{{for guideGetter : $guideGetters}}
  {{$guideGetter}}
{{end}}

{{for actionGetter : $actionGetters}}
  {{$actionGetter.get("declaration")}}
{{end}}
  private final ResettableGetter<Action>[] _actionGetters = new ResettableGetter[] {
{{for actionGetter : $actionGetters}}
    {{$actionGetter.get("name")}}{{when $actionGetter.isNotLast()}},{{end}}
{{end}}
  };

{{for constructor : $constructors}}
  public {{$classSimpleName}}({{for param : $constructor.get("params")}}{{$param.get("type")}} {{$param.get("name")}}{{when $param.isNotLast()}}, {{end}}{{end}}) {
    super({{for param : $constructor.get("params")}}{{$param.get("name")}}{{when $param.isNotLast()}},{{end}}{{end}});
  }
{{end}}

{{for method : $domainMethods}}
  @Order({{$method.index()}})
  @Override
  {{$method.get("declaration")}};

{{end}}

  @Override
  public <B, Q> B moveThru(String tid, Q qualifier) throws TraverseException {
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover1<{{$sourceClassSimpleName}}, B, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    return (B) mover.move(this, qualifier);
  }

  @Override
  public <B> B moveThru(TransitionMethod0<? super {{$domainClassSimpleName}}, B> transitionMethod) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId({{$domainClassSimpleName}}.class, transitionMethod);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover0<{{$sourceClassSimpleName}}, B> mover = Modules.current().autoMoverThruTransition0(sourceType, tid);
    return (B) mover.move(this);
  }

  @Override
  public <B, Q> B moveThru(TransitionMethod1<? super {{$domainClassSimpleName}}, B, Q> transitionMethod, Q qualifier) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId({{$domainClassSimpleName}}.class, transitionMethod, null);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover1<{{$sourceClassSimpleName}}, B, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    return (B) mover.move(this, qualifier);
  }

  @Override
  public <B> B moveThru(Class<? extends Transition0> transitionClass) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId(transitionClass);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover0<{{$sourceClassSimpleName}}, B> mover = Modules.current().autoMoverThruTransition0(sourceType, tid);
    return (B) mover.move(this);
  }

  @Override
  public <B, Q> B moveThru(Class<? extends Transition1> transitionClass, Q qualifier) throws TraverseException {
    String tid = TransitionFunctions.getTransitionId(transitionClass);
    Type<{{$sourceClassSimpleName}}{{$typeParamsBrief}}> sourceType = Types.of({{$sourceClassSimpleName}}.class);
    Mover1<{{$sourceClassSimpleName}}, B, Q> mover = Modules.current().autoMoverThruTransition1(sourceType, tid);
    return (B) mover.move(this, qualifier);
  }

  @Override
  public int numberGuides() {
    return {{$domainMethods.size()}};
  }

  @Override
  public Action getGuideAction(int index) {
    return _actionGetters[index].get();
  }
}
